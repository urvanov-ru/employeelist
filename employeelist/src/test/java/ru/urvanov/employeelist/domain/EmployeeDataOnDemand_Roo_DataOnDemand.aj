// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ru.urvanov.employeelist.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ru.urvanov.employeelist.domain.Department;
import ru.urvanov.employeelist.domain.DepartmentDataOnDemand;
import ru.urvanov.employeelist.domain.Employee;
import ru.urvanov.employeelist.domain.EmployeeDataOnDemand;
import ru.urvanov.employeelist.domain.EmployeePosition;
import ru.urvanov.employeelist.domain.EmployeePositionDataOnDemand;

privileged aspect EmployeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeDataOnDemand: @Component;
    
    private Random EmployeeDataOnDemand.rnd = new SecureRandom();
    
    private List<Employee> EmployeeDataOnDemand.data;
    
    @Autowired
    DepartmentDataOnDemand EmployeeDataOnDemand.departmentDataOnDemand;
    
    @Autowired
    EmployeePositionDataOnDemand EmployeeDataOnDemand.employeePositionDataOnDemand;
    
    public Employee EmployeeDataOnDemand.getNewTransientEmployee(int index) {
        Employee obj = new Employee();
        setDepartment(obj, index);
        setEmployeePosition(obj, index);
        setName(obj, index);
        setPatronymic(obj, index);
        setSurname(obj, index);
        return obj;
    }
    
    public void EmployeeDataOnDemand.setDepartment(Employee obj, int index) {
        Department department = departmentDataOnDemand.getRandomDepartment();
        obj.setDepartment(department);
    }
    
    public void EmployeeDataOnDemand.setEmployeePosition(Employee obj, int index) {
        EmployeePosition employeePosition = employeePositionDataOnDemand.getRandomEmployeePosition();
        obj.setEmployeePosition(employeePosition);
    }
    
    public void EmployeeDataOnDemand.setName(Employee obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void EmployeeDataOnDemand.setPatronymic(Employee obj, int index) {
        String patronymic = "patronymic_" + index;
        if (patronymic.length() > 100) {
            patronymic = patronymic.substring(0, 100);
        }
        obj.setPatronymic(patronymic);
    }
    
    public void EmployeeDataOnDemand.setSurname(Employee obj, int index) {
        String surname = "surname_" + index;
        if (surname.length() > 100) {
            surname = surname.substring(0, 100);
        }
        obj.setSurname(surname);
    }
    
    public Employee EmployeeDataOnDemand.getSpecificEmployee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Employee obj = data.get(index);
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public Employee EmployeeDataOnDemand.getRandomEmployee() {
        init();
        Employee obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public boolean EmployeeDataOnDemand.modifyEmployee(Employee obj) {
        return false;
    }
    
    public void EmployeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Employee.findEmployeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Employee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Employee>();
        for (int i = 0; i < 10; i++) {
            Employee obj = getNewTransientEmployee(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
