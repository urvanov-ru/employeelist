// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ru.urvanov.employeelist.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import ru.urvanov.employeelist.domain.Department;

privileged aspect Department_Roo_Jpa_ActiveRecord{

@PersistenceContext transient EntityManager Department.entityManager;

public static final List<String>Department.fieldNames4OrderClauseFilter=java.util.Arrays.asList("descr");

public static final EntityManager Department.entityManager(){EntityManager em=new Department().entityManager;if(em==null)throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");return em;}

public static long Department.countDepartments(){return entityManager().createQuery("SELECT COUNT(o) FROM Department o",Long.class).getSingleResult();}

public static List<Department>Department.findAllDepartments(){return entityManager().createQuery("SELECT o FROM Department o",Department.class).getResultList();}

public static List<Department>Department.findAllDepartments(String sortFieldName,String sortOrder){String jpaQuery="SELECT o FROM Department o";if(fieldNames4OrderClauseFilter.contains(sortFieldName)){jpaQuery=jpaQuery+" ORDER BY "+sortFieldName;if("ASC".equalsIgnoreCase(sortOrder)||"DESC".equalsIgnoreCase(sortOrder)){jpaQuery=jpaQuery+" "+sortOrder;}}return entityManager().createQuery(jpaQuery,Department.class).getResultList();}

public static Department Department.findDepartment(Long id){if(id==null)return null;return entityManager().find(Department.class,id);}

public static List<Department>Department.findDepartmentEntries(int firstResult,int maxResults){return entityManager().createQuery("SELECT o FROM Department o",Department.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();}

public static List<Department>Department.findDepartmentEntries(int firstResult,int maxResults,String sortFieldName,String sortOrder){String jpaQuery="SELECT o FROM Department o";if(fieldNames4OrderClauseFilter.contains(sortFieldName)){jpaQuery=jpaQuery+" ORDER BY "+sortFieldName;if("ASC".equalsIgnoreCase(sortOrder)||"DESC".equalsIgnoreCase(sortOrder)){jpaQuery=jpaQuery+" "+sortOrder;}}return entityManager().createQuery(jpaQuery,Department.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();}

@Transactional public void Department.persist(){if(this.entityManager==null)this.entityManager=entityManager();this.entityManager.persist(this);}

@Transactional public void Department.remove(){if(this.entityManager==null)this.entityManager=entityManager();if(this.entityManager.contains(this)){this.entityManager.remove(this);}else{Department attached=Department.findDepartment(this.id);this.entityManager.remove(attached);}}

@Transactional public void Department.flush(){if(this.entityManager==null)this.entityManager=entityManager();this.entityManager.flush();}

@Transactional public void Department.clear(){if(this.entityManager==null)this.entityManager=entityManager();this.entityManager.clear();}

@Transactional public Department Department.merge(){if(this.entityManager==null)this.entityManager=entityManager();Department merged=this.entityManager.merge(this);this.entityManager.flush();return merged;}

}
